{"version":3,"sources":["components/Wrapper/index.jsx","components/Jumbotron/index.jsx","components/Score/index.jsx","components/Grid/index.jsx","components/Item/index.jsx","components/Footer/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Jumbotron","id","src","alt","Score","current","message","high","Grid","Item","onClick","check","image","Footer","App","state","images","highScore","score","scramble","x","y","length","Math","floor","random","setState","i","clicked","name","reset","map","element","this","item","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0b86ac88.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      {props.children}\r\n    </div>)\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron(props) {\r\n  return (\r\n    <div className=\"jumbotron mt-4\">\r\n      <img id=\"logo\" src=\"/img/logo.png\" alt=\"\" />\r\n      <h3 id=\"clickText\">Clicky Game</h3>\r\n      <h5 className=\"\">Don't click the same image twice!</h5>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Score(props) {\r\n  return (\r\n    <div id=\"score\" className=\"container d-flex justify-content-between\">\r\n      <div>\r\n        <h2 id=\"current\">Current Score: {props.current} </h2>\r\n      </div>\r\n      <div>\r\n        <h4 id=\"message\">{props.message}</h4>\r\n      </div>\r\n      <div>\r\n        <h2 id=\"high\">High Score: {props.high} </h2>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Score","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Grid(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div id='gridBox'>\r\n\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Grid;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Item(props) {\r\n  return (\r\n    <div className=\"gridItem\">\r\n      <div>\r\n        <img onClick={() => props.check(props.id)} className=\"photo\" src={props.image} alt=\"\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Item;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"footer\">\r\n        <div className=\"footText\">\r\n          &copy; Kamberos 2020\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Score from \"./components/Score\";\nimport Grid from \"./components/Grid\";\nimport Item from \"./components/Item\";\nimport Footer from \"./components/Footer\";\nimport images from \"./photos.json\"\n\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    images,\n    highScore: 0,\n    score: 0,\n    message: [<i className=\"fas fa-chevron-circle-right\"></i>, \" Click Any Character to Start \", <i className=\"fas fa-chevron-circle-left\"></i>]\n  };\n\n  scramble = () => {\n    const images = this.state.images;\n\n    let length = images.length, x, y;\n    while (length) {\n\n      x = Math.floor(Math.random() * length--)\n\n      y = images[length]\n      images[length] = images[x]\n      images[x] = y;\n    }\n    this.setState({ images })\n  }\n\n  check = (id) => {\n    let image = this.state.images;\n\n    for (let i = 0; i < image.length; i++) {\n      if (image[i].id === id && !image[i].clicked) {\n        image[i].clicked = true;\n        this.setState({ images, score: this.state.score + 1, message: \"\" }, () => {\n          if (this.state.score === 12) {\n            return this.reset()\n          } else {\n            // return this.scramble()\n          }\n        })\n      } else if (image[i].id === id && image[i].clicked) {\n        this.setState({ message: [<i className=\"fas fa-chevron-circle-right\"></i>, ` ${image[i].name} Already Clicked.. Try Again `, <i className=\"fas fa-chevron-circle-left\"></i>] })\n        return this.reset()\n\n      }\n    }\n  }\n\n  reset = () => {\n    let images = this.state.images.map(element => {\n      return element.clicked = false\n    });\n\n    if (this.state.score > this.state.highScore) {\n      this.setState({ images, score: 0, highScore: this.state.score, message: [<i className=\"fas fa-chevron-circle-right\"></i>, \" That's all 12.. Great Job! \", <i className=\"fas fa-chevron-circle-left\"></i>] })\n      this.scramble()\n    } else {\n      this.setState({ images, score: 0 })\n      this.scramble()\n    }\n\n\n  }\n\n\n  render() {\n    return (\n      <Wrapper>\n        <Jumbotron />\n        <Score\n          current={this.state.score}\n          high={this.state.highScore}\n          message={this.state.message}\n        />\n        <Grid>\n          {this.state.images.map(item => (\n            <Item\n              id={item.id}\n              image={item.image}\n              clicked={item.clicked}\n              check={this.check}\n            />\n          ))}\n        </Grid>\n        <Footer />\n      </Wrapper >\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}